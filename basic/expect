
# Example 1
# =========
# -re, 使用正規表示式匹配.
expect_background {
    -i exp2 -re ".*" {puts $expect_out(buffer)}
}

# Example 2
# =========
spawn ssh -t root@$server_address "$*"
expect -timeout 2 "Are you sure (yes/no)?" { send "yes\n" }
expect "s password:" { send "Correct_Password\n" }
send_user "It's OK\r"

# Example 3
# =========
# Get Expect ID
set aaa [spawn plink -telnet 192.168.1.1]
# Response: 9068

puts $aaa
# Response: 9068

# Example 4
# =========
# Ping.
package require Expect
spawn ping 192.168.1.1 -n 1   ;# 此行執行後, 即 ping 就被送出去.

#- exp2, 在執行 expect_background 後就需遞增 exp2.
#- 直接 $expect_out(buffer) 是讀不到結果, 需下整個 expect_background{} 才行.
expect_background {
     -i exp -re ".*" {
             puts $expect_out(buffer) 
}}

# Example 5
# =========
# Telnet
# 連線建立成功會有一個 Channel ID.
spawn plink -telnet 192.168.1.1

expect_background {
     -i exp2 -re ".*" {
              puts $expect_out(buffer)
}}

# 等待有 “root” 的字串時, 送出 “uname -a”, 並按下 Enter “\r”. → → 很像沒啥做用.
expect -i exp2 "root" { send "uname -a\r" }

# or 直接送出 “uname -a”, 並按下 Enter “\r”.
expect -i exp2 "" { send "uname -a\r" }

# 直接送出字串 “df -h”, 並按下 Enter “\r”.
send -i exp2 "df -h\r"

# 送出 “Ctrl + C”.
send -i exp2 "0\x03"

# 離開 Telnet.
send -i exp2 "exit\r"

