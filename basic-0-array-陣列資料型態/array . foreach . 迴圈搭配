陣列也常拿來與 foreach 迴圈搭配使用.

set arrayPrice(apple) 10
set arrayPrice(orange) 12
array get arrayPrice

#; OUTPUT=> orange 12 apple 10

#; Example A
#; =========
foreach {key value} [array get arrayPrice] {
     puts "arrayPrice($key) = $value"
}

#; OUTPUT=> arrayPrice(orange) = 12
#; OUTPUT=> arrayPrice(apple) = 10


#; Example B
#; =========
#; 或者這樣寫，程式的結果也會一樣
foreach key [array names arrayPrice] {
    puts "arrayPrice($key) = $arrayPrice($key)"
}

#; OUTPUT=> arrayPrice(orange) = 12
#; OUTPUT=> arrayPrice(apple) = 10


#; 因為使用 array get 或 foreach 時, TCL 的作法是先產生一個暫時性的list, 這樣會浪費一些記憶體空間與執行速度.
#; 改用 array 的搜尋功可以加快陣列元素巡訪 (iterate) 的速度.

set searchToken [array startsearch price]
while {[array anymore price $searchToken]} {
     set key [array nextelement price $searchToken]
     set value $price($key)
     puts "$key = $value"
}

array donesearch price $searchToken
#; OUTPUT=> orange = 12
#; OUTPUT=> apple = 10
