## 只取 0~9.
## =========

set input "123 456 ab cd"
set getNumber ""
regexp {[0-9]+} [string map {" " ""} $input] getNumber
puts $getNumber
## OUTPUT: 123456


## "MLTG-CN         " 只取英文和 "-".
## =================================

set input "MLTG-CN         "
set getModel ""
regexp -all -inline {[A-Z-]+} $getModel
puts $getModel
## OUTPUT: MLTG-CN


正規表達式（Regular Expression, Regex or RegExp）簡單來說就是用一堆符號來表達對文字的一種過濾邏輯，但這堆符號又代表著什麼呢？
這篇文章想和大家分享一些自己在工作上，使用 python re模組 處理相對複雜情況時所使用的技巧。

首先先來認識常用的 4 種 RegExp 符號：

比對 [一個或多個字元] 的符號

[]: 符合在括號內的任何字元
[^]: 符合不在括號內的任何字元

具有 [定位] 功能的符號，不吃掉任何的字元

^: 開頭的字元
$: 結束的字元


比對 [出現次數] 的符號

{}: 比對文字出現的次數
x{3} 剛好 3 個 x
x{1,3} 1 到 3 個 x
x{1,} 至少 1 個 x
x{,3} 最多 3 個 x
*: 出現 0 次或多次，相當於 {0,}
+: 出現 1 次或多次，相當於 {1,}
?: 出現 0 次或 1 次，相當於 {0,1}

特殊字元

.: 可以用來表達任何字元
\: 可以用來跳脫特殊字元
\d: 任何數字字元，相當於 [0-9]
\D: 任何非數字字元，相當於 [^0-9]
\w: 任何數字字母底線，相當於 [A-Za-z0-9_]
\W: 任何非數字字母底線，相當於 [^A-Za-z0-9_]
\s: 任何空白字元(空白,換行,tab)，相當於 [ \f\n\r\t\v]
\S: 任何非空白字元(空白,換行,tab)，相當於 [^ \f\n\r\t\v]

\s: 比對空白字元
