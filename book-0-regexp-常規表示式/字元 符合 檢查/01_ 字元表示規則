
正規表達式（Regular Expression, Regex or RegExp）簡單來說就是用一堆符號來表達對文字的一種過濾邏輯，但這堆符號又代表著什麼呢？
這篇文章想和大家分享一些自己在工作上，使用 python re模組 處理相對複雜情況時所使用的技巧。

首先先來認識常用的 4 種 RegExp 符號：

比對 [一個或多個字元] 的符號

[]: 符合在括號內的任何字元
[^]: 符合不在括號內的任何字元

具有 [定位] 功能的符號，不吃掉任何的字元

^: 開頭的字元
$: 結束的字元




特殊字元

.: 可以用來表達任何字元
\: 可以用來跳脫特殊字元
\d: 任何數字字元，相當於 [0-9]
\D: 任何非數字字元，相當於 [^0-9]
\w: 任何數字字母底線，相當於 [A-Za-z0-9_]
\W: 任何非數字字母底線，相當於 [^A-Za-z0-9_]
\s: 任何空白字元(空白,換行,tab)，相當於 [ \f\n\r\t\v]
\S: 任何非空白字元(空白,換行,tab)，相當於 [^ \f\n\r\t\v]

\s: 比對空白字元



字元表示	規則
.   -->  所有字元
\w  -->  所有字母，包含大小寫跟數字
\d  -->  所有數字（0-9)，也就是[0-9] 的簡寫
\D  -->  除了數字以外的字元
[ ]  -->  指定的範圍，例如[a-f]
\A  -->  字串開始 . Lu: 輸出結果都是 大括號 (). 例如: {} {} {} {} {} {} {} {} {} {} {} {} {} {} 
\z  -->  字串結束 . Lu: 輸出錯誤訊息 couldn't compile regular expression pattern: invalid escape \ sequence
\b  -->  邊界 (boundary); 旁邊不可有其他文數字
\s  -->  空白(white space)，等同 [ \t\r\n\f]
\S  -->  非空白，等同 [^\t\r\n\f]
^   -->  一列之首
$   -->  一列之尾

regexp -all -inline -- {Current=-{0,1}\d+\.\d+} $infile
