#; 當 Log 檔太大 (ex. 24 mb)時, 會有問題.
# 應該是美讀取一行 Log 就寫入 csv, 而造成效率不彰, 還有其他錯誤.
# 將寫入 csv 的程式搬出來即可解決.

#; 讀取美行 Log
foreach item [regexp -all -inline -- $pattern $inSource] {
		set inItem [split $item :]
		set data ""
		set total 53
		for {set i 0} {$i <= $total} {incr i} {
				if {$i == 0} { set mac [lindex $inItem 1] }
				set i [expr $i +1]
				append data "[lindex $inItem $i],"
		}
		append dataarray($mac) "$data\n"
}

#; 寫入 csv
foreach name [array names dataarray] {
			_f_WriteFile "${tmpDir}/log_3_sys_$name\_tmp.csv" w $dataarray($name)
}


#: Code Here
#; ====================================================
#; ====================================================
proc _f_ReadFile { fname } {
		if { [file exists $fname] } {
				set fd [open $fname r]
				set data [read $fd]
				close $fd
				return $data
		} else {
				return ""
		}
}

proc _f_WriteFile { fname access data } {
	if { [catch {
		set fd [open $fname $access]
		puts -nonewline $fd $data
		close $fd
	} retmsg] } {
		return 0
	} else {
		return 1
	}
}

#; Stage A:
#; ========
#; 定義要取的 Pattern
#; ==============================================
set sys_1_mac 	{MAC:\w+:} 																								;# item 01
set sys_2_ci 	{CIA:-{0,1}\d+\.\d+:CI0:-{0,1}\d+\.\d+:CI1:-{0,1}\d+\.\d+:CI2:-{0,1}\d+\.\d+:CI3:-{0,1}\d+\.\d+:} 		;# item 03 05 07 09 11
set sys_3_mem 	{MT:-{0,1}\d+:MS:-{0,1}\d+:MF:-{0,1}\d+:} 																;# item 13 15 17
set sys_4_pyid 	{PYID1:\w+:PYID2:\w+:} 																					;# item 19 21
set sys_5_ct 	{CT0:-{0,1}\d+:CT1:-{0,1}\d+:CT2:-{0,1}\d+:CT3:-{0,1}\d+:CT4:-{0,1}\d+:CT5:-{0,1}\d+:CT6:-{0,1}\d+:} 	;# item 23 25 27 29 31 33 35
set sys_6_pyt 	{PYT:-{0,1}\d+\.\d+:} 																					;# item 37
set sys_7_wifi1 {WILMAC:-{0,1}\d+\.\d+:WILRADIO:-{0,1}\d+\.\d+:CHAN: -{0,1}\d+:} 										;# item 39, 41, 43
set sys_8_wifi2 {RXBI:\s{0,1}\d{0,2}:TXBI:\s{0,1}\d{0,2}:RSSI:\s{0,1}-\d{0,2}:MCS:\s{0,1}\d{0,2}:TXPI:\s{0,1}\d{0,2}} 	;# item 45, 47, 49, 51, 53

set pattern "$sys_1_mac$sys_2_ci$sys_3_mem$sys_4_pyid$sys_5_ct$sys_6_pyt$sys_7_wifi1$sys_8_wifi2"

#; Stage B:
#; ========
#; 讀出來源 Log.
#; ============
set sourceFile "C:/testlog/WDO_PARSER_RAW/101_Try1/syslog2.log"
set inSource [_f_ReadFile $sourceFile]

#; Stage C:
#; ========
#; 建立 tmp 資料夾.
#; ================
set tmpDir "C:/testlog/WDO_PARSER_RAW/101_Try1/log_3_sys/tmp"
if { [file exist $tmpDir] } { file delete -force $tmpDir }
if { ![file exist $tmpDir] } { file mkdir $tmpDir }

#; Stage D:
#; ========
#; 1. 從來源 Log 取出需要的行.
#; 2. 讀出值.
#; 3. 寫入 tmp 資料夾裡的 tmp 檔.
#; ==============================================
if {[array exist dataarray]} {
		array unset dataarray
}

foreach item [regexp -all -inline -- $pattern $inSource] {
		set inItem [split $item :]
		set data ""

		set total 53
		for {set i 0} {$i <= $total} {incr i} {
				if {$i == 0} { set mac [lindex $inItem 1] }
				set i [expr $i +1]
				append data "[lindex $inItem $i],"
		}

		# puts \n$mac
		# puts $data
		# after 500
		append dataarray($mac) "$data\n"
}

foreach name [array names dataarray] {
			_f_WriteFile "${tmpDir}/log_3_sys_$name\_tmp.csv" w $dataarray($name)
}

puts "\n\nDONE 1\n\n"


#; Stage E:
#; ========
#; 1. 將項目說明寫入 Report.csv 檔的第一行.
#; 2. 從來源 log 取出的值, 寫入 Report.csv.
#; ==============================================
set build_date_time [clock format [clock seconds] -format "%y%m%d_%H%M%S"]
set build_time [lindex [string map {_ " "} $build_date_time] 1]

set csv_line_1 "MAC,CIA,CI0,CI1,CI2,CI3,MT,MS,MF,PYID1,PYID2,CT0,CT1,CT2,CT3,CT4,CT5,CT6,PYT,WILMAC,WILRADIO,CHAN,RXBI,TXBI,RSSI,MCS,TXPI\n"
set reportDir "C:/testlog/WDO_PARSER_RAW/101_Try1/log_3_sys"

foreach fname [glob -no -directory $tmpDir -tails *.csv] {
				# puts "fname : $fname"

				set mac [lindex [string map {_ " "} [string map {- " "} [string map {.csv ""} $fname]]] 3]

				set reportFile "$::reportDir/log_3_sys_$mac\_$build_time.csv"
				_f_WriteFile $reportFile w $csv_line_1

				set inTMP [_f_ReadFile ${tmpDir}/$fname]
				_f_WriteFile $reportFile a+ $inTMP
}

#; Stage F:
#; ========
#; 刪除操作暫用的 tmp 資寮夾和檔案.
#; ============================================
if { [file exist $tmpDir] } { file delete -force $tmpDir }

puts "\n\nDONE 2\n\n"
